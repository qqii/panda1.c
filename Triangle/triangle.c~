/* Classify a triangle according to the integer lengths of its sides. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <math.h>

// Swaps two ints in place.
void swap(int *int1, int *int2){
    int temp = *int1;
    *int1 = *int2;
    *int2 = temp;
}

// Given 3 ints, sorts them in place lowest to highest.
void sort3(int *int1, int *int2, int *int3){
    printf("%ld, %ld, %ld\n", *int1, *int2, *int3);
    if(*int1 > *int2){
        swap(int1, int2);
    }
    if(*int1 > *int3){
        swap(int1, int3);
    }
    if(*int2 > *int3){
        swap(int2, int3);
    }
    printf("%ld, %ld, %ld\n", *int1, *int2, *int3);
}

// Given a string, converts it to a int that is validated.
// This means the int is no larger than sqrt(LONG_MAX).
// Returns 0 if inter than sqrt(LONG_MAX)
int validatedstrtol(char *string){
    int length = strtol(string1, NULL, 10);
    if(sqrt(int_MAX) < length){
        return length;
    }
    return 0;
}

// Classify a triangle, given side lengths as strings:
// Not fully implemented yet
char *triangle(char *string1, char *string2, char *string3) {
    int length1, length2, length3;




    return "Equilateral";
}

// Check that two strings are equal
void eq(char *actual, char *expected) {
    if (strcmp(actual, expected) != 0) {
        fprintf(stderr, "Test failure, actual: %s\n", actual);
        fprintf(stderr, "Expected: %s\n", expected);
        exit(1);
    }
}

// Run tests on the triangle function.
void test() {
    int mark = 0;
    eq(triangle("8", "8", "8"), "Equilateral"); mark++;
/*
    eq(triangle("1073", "1073", "1073"), "Equilateral"); mark++;
    eq(triangle("15", "15", "13"), "Isosceles"); mark++;
    eq(triangle("15", "13", "15"), "Isosceles"); mark++;
    eq(triangle("13", "15", "15"), "Isosceles"); mark++;
    eq(triangle("25", "25", "27"), "Isosceles"); mark++;
    eq(triangle("25", "27", "25"), "Isosceles"); mark++;
    eq(triangle("27", "25", "25"), "Isosceles"); mark++;
    eq(triangle("3", "4", "5"), "Right"); mark++;
    eq(triangle("5", "12", "13"), "Right"); mark++;
    eq(triangle("5", "13", "12"), "Right"); mark++;
    eq(triangle("12", "5", "13"), "Right"); mark++;
    eq(triangle("12", "13", "5"), "Right"); mark++;
    eq(triangle("13", "5", "12"), "Right"); mark++;
    eq(triangle("13", "12", "5"), "Right"); mark++;
    eq(triangle("12", "14", "15"), "Scalene"); mark++;
    eq(triangle("12", "15", "14"), "Scalene"); mark++;
    eq(triangle("14", "12", "15"), "Scalene"); mark++;
    eq(triangle("14", "15", "12"), "Scalene"); mark++;
    eq(triangle("15", "12", "14"), "Scalene"); mark++;
    eq(triangle("15", "14", "12"), "Scalene"); mark++;
    eq(triangle("7", "9", "16"), "Flat"); mark++;
    eq(triangle("7", "16", "9"), "Flat"); mark++;
    eq(triangle("9", "16", "7"), "Flat"); mark++;
    eq(triangle("16", "7", "9"), "Flat"); mark++;
    eq(triangle("16", "9", "7"), "Flat"); mark++;
    eq(triangle("2", "3", "13"), "Impossible"); mark++;
    eq(triangle("2", "13", "3"), "Impossible"); mark++;
    eq(triangle("13", "2", "3"), "Impossible"); mark++;
    eq(triangle("0", "0", "0"), "Illegal"); mark++;
    eq(triangle("0", "10", "12"), "Illegal"); mark++;
    eq(triangle("10", "0", "12"), "Illegal"); mark++;
    eq(triangle("10", "12", "0"), "Illegal"); mark++;
    eq(triangle("-1", "-1", "-1"), "Illegal"); mark++;
    eq(triangle("-1", "10", "12"), "Illegal"); mark++;
    eq(triangle("10", "-1", "12"), "Illegal"); mark++;
    eq(triangle("10", "12", "-1"), "Illegal"); mark++;
    eq(triangle("x", "y", "z"), "Illegal"); mark++;
    eq(triangle("10", "12", "13.4"), "Illegal"); mark++;
    eq(triangle("03", "4", "5"), "Illegal"); mark++;
    eq(triangle("3", "04", "5"), "Illegal"); mark++;
    eq(triangle("3", "4", "05"), "Illegal"); mark++;
    eq(triangle("3x", "4y", "5z"), "Illegal"); mark++;
    eq(triangle("2147483648","2147483647","2147483647"),"Illegal"); mark++;
    eq(triangle("2147483647","2147483648","2147483647"),"Illegal"); mark++;
    eq(triangle("2147483647","2147483647","2147483648"),"Illegal"); mark++;
    eq(triangle("2147483647","2147483647","2147483647"),"Equilateral"); mark++;
    eq(triangle("1100000000","1705032704","1805032704"),"Scalene"); mark++;
    eq(triangle("2000000001","2000000002","2000000003"),"Scalene"); mark++;
    eq(triangle("150000002","666666671","683333338"),"Scalene"); mark++;
*/
    printf("Tests passed: %d\n", mark);
}

// Run the program or, if there are no arguments, test it.
int main(int argc, char **argv) {
    if (argc == 1) {
        test();
    }
    else if (argc == 4) {
        char *result = triangle(argv[1], argv[2], argv[3]);
        printf("%s\n", result);
    }
    else {
        fprintf(stderr, "Use e.g.: ./triangle 3 4 5\n");
        exit(1);
    }
}
